{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Xandeum pNode Documentation","text":"<p>Welcome to the complete documentation for Xandeum pNode - a high-performance blockchain node implementation.</p>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<pre><code># Install via apt package manager\nsudo apt update\nsudo apt install pod\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<pre><code># Start with default settings (private pRPC)\npod\n\n# Start with public pRPC access\npod --rpc-ip 0.0.0.0\n\n# Check version\npod --version\n\n# Get help\npod --help\n</code></pre>"},{"location":"#test-your-setup","title":"Test Your Setup","text":"<pre><code>curl -X POST http://127.0.0.1:6000/rpc \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"get-version\",\n    \"id\": 1\n  }'\n</code></pre>"},{"location":"#whats-included","title":"What's Included","text":""},{"location":"#prpc-api","title":"\ud83d\udd0c pRPC API","text":"<p>Complete JSON-RPC 2.0 API for interacting with your pnode: - get-version: Get pnode software version - get-stats: Retrieve comprehensive pnode statistics - get-pods: List known peer pnodes in the network</p> <p>View pRPC API Documentation</p>"},{"location":"#cli-usage","title":"\u2699\ufe0f CLI Usage","text":"<p>Comprehensive command-line reference: - --rpc-ip: Configure pRPC server IP binding - --entrypoint: Set bootstrap node for peer discovery - --atlas-ip: Configure Atlas server connection - And more...</p> <p>View CLI Documentation</p>"},{"location":"#architecture-overview","title":"Architecture Overview","text":"<p>The Xandeum pNode consists of several key components:</p> <ul> <li>pRPC Server: JSON-RPC API on port 6000 (configurable IP)</li> <li>Stats Dashboard: Web interface on port 80 (localhost only)</li> <li>Gossip Protocol: Peer-to-peer communication on port 9001</li> <li>Atlas Client: Data streaming connection on port 5000</li> </ul>"},{"location":"#default-configuration","title":"Default Configuration","text":"Service Port Access Configurable pRPC API 6000 Private (127.0.0.1) IP only Stats Dashboard 80 Private (127.0.0.1) No Gossip Protocol 9001 All interfaces No Atlas Connection 5000 Fixed endpoint No <p>Security by Default</p> <p>The pnode is configured to be secure by default - pRPC API is private unless explicitly configured otherwise.</p>"},{"location":"cli/","title":"CLI Usage","text":"<p>Complete reference for all command-line arguments and configuration options.</p>"},{"location":"cli/#basic-usage","title":"Basic Usage","text":""},{"location":"cli/#start-with-default-settings","title":"Start with Default Settings","text":"<pre><code>pod\n</code></pre> <p>Starts the pnode with default configuration: - pRPC server on <code>127.0.0.1:6000</code> (private) - Stats server on <code>127.0.0.1:80</code> (private) - Uses default bootstrap node for peer discovery</p>"},{"location":"cli/#check-version","title":"Check Version","text":"<pre><code>pod --version\n# Output: pod 0.4.2\n</code></pre>"},{"location":"cli/#get-help","title":"Get Help","text":"<pre><code>pod --help\n# Shows complete usage information with all options and examples\n</code></pre> <p>Output: <pre><code>Xandeum pNode is a high-performance blockchain node that provides JSON-RPC API, \npeer-to-peer communication via gossip protocol, and real-time statistics monitoring.\n\nPORTS:\n    6000    pRPC API (configurable IP binding)\n    80      Stats dashboard (localhost only)  \n    9001    Gossip protocol (peer communication)\n    5000    Atlas connection (outbound)\n\nDOCUMENTATION:\n    For complete documentation, visit /usr/share/doc/pod/ after installation\n\nUsage: pod [OPTIONS]\n\nOptions:\n      --rpc-ip &lt;IP_ADDRESS&gt;\n          Set RPC server IP binding [default: 127.0.0.1 for private]\n\n      --entrypoint &lt;IP:PORT&gt;\n          Bootstrap node for peer discovery [default: 173.212.207.32:9001]\n\n      --no-entrypoint\n          Disable peer discovery (run in isolation)\n\n      --atlas-ip &lt;IP:PORT&gt;\n          Atlas server address for data streaming [default: 95.217.229.171:5000]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -V, --version\n          Print version\n</code></pre></p>"},{"location":"cli/#command-line-arguments","title":"Command-Line Arguments","text":""},{"location":"cli/#-rpc-ip-ip_address","title":"--rpc-ip <code>&lt;IP_ADDRESS&gt;</code>","text":"<p>Optional - Specifies the IP address for the pRPC server to bind to.</p> <p>Default: <code>127.0.0.1</code> (private, localhost only)</p> Examples <pre><code># Private access (default)\npod --rpc-ip 127.0.0.1\n\n# Public access from any interface\npod --rpc-ip 0.0.0.0\n\n# Bind to specific network interface\npod --rpc-ip 192.168.1.100\n\n# IPv6 localhost\npod --rpc-ip ::1\n</code></pre> <p>Security Note</p> <p>Using <code>0.0.0.0</code> makes your pRPC API accessible from any network interface. Only use this if you understand the security implications.</p>"},{"location":"cli/#-entrypoint-ipport","title":"--entrypoint <code>&lt;IP:PORT&gt;</code>","text":"<p>Optional - Specifies a bootstrap node to connect to for initial peer discovery.</p> <p>Default: <code>173.212.207.32:9001</code> (default bootstrap node)</p> Examples <pre><code># Connect to specific bootstrap node\npod --entrypoint 192.168.1.50:9001\n\n# Connect to custom port\npod --entrypoint 10.0.0.5:9002\n</code></pre>"},{"location":"cli/#-no-entrypoint","title":"--no-entrypoint","text":"<p>Optional - Disables bootstrap peer discovery. The pnode will start without attempting to connect to any initial peers.</p> Example <pre><code># Start without peer discovery\npod --no-entrypoint\n</code></pre> <p>Isolated Mode</p> <p>When using <code>--no-entrypoint</code>, your pnode will operate in isolation until other pnodes connect to it directly.</p>"},{"location":"cli/#-atlas-ip-ipport","title":"--atlas-ip <code>&lt;IP:PORT&gt;</code>","text":"<p>Optional - Specifies the Atlas server address for data streaming and synchronization.</p> <p>Default: <code>95.217.229.171:5000</code> (Devnet)</p> Examples <pre><code># Connect to local Atlas server\npod --atlas-ip 127.0.0.1:5000\n\n# Connect to custom Atlas server\npod --atlas-ip 10.0.0.10:5000\n</code></pre>"},{"location":"cli/#-version","title":"--version","text":"<p>Standalone - Displays the pnode software version and exits immediately.</p> <pre><code>pod --version\n# Output: pod 0.4.2\n</code></pre>"},{"location":"cli/#-help","title":"--help","text":"<p>Standalone - Displays complete usage information including all options, examples, and port information.</p> <pre><code>pod --help\n# Shows complete usage information with all options and examples\n</code></pre>"},{"location":"cli/#common-usage-patterns","title":"Common Usage Patterns","text":""},{"location":"cli/#private-development-setup","title":"\ud83d\udd12 Private Development Setup","text":"<p><pre><code>pod --no-entrypoint\n</code></pre> Perfect for local development and testing. No external connections, pRPC only accessible locally.</p>"},{"location":"cli/#public-node","title":"\ud83c\udf10 Public Node","text":"<p><pre><code>pod --rpc-ip 0.0.0.0\n</code></pre> Runs a public node with pRPC API accessible from any network interface. Uses default bootstrap for peer discovery.</p>"},{"location":"cli/#enterpriseprivate-network","title":"\ud83c\udfe2 Enterprise/Private Network","text":"<p><pre><code>pod --rpc-ip 192.168.1.100 --entrypoint 192.168.1.50:9001 --atlas-ip 192.168.1.10:5000\n</code></pre> Configured for private corporate networks with custom Atlas server and internal bootstrap node.</p>"},{"location":"cli/#local-testing-with-custom-atlas","title":"\ud83e\uddea Local Testing with Custom Atlas","text":"<p><pre><code>pod --atlas-ip 127.0.0.1:5000 --no-entrypoint\n</code></pre> For testing with a local Atlas server without peer discovery.</p>"},{"location":"cli/#port-information","title":"Port Information","text":"Service Default Port Configurable Description pRPC API 6000 IP Only JSON-RPC API endpoint Stats Dashboard 80 \u274c Fixed Web-based statistics dashboard (localhost only) Gossip Protocol 9001 \u274c Fixed Peer-to-peer communication and bootstrap discovery Atlas Connection 5000 \u274c Fixed Connection to Atlas server for data streaming"},{"location":"cli/#firewall-configuration","title":"Firewall Configuration","text":"<p>For public nodes, ensure these ports are accessible:</p> <ul> <li>Port 6000: pRPC API (if using <code>--rpc-ip 0.0.0.0</code>)</li> <li>Port 9001: Gossip protocol (always required for peer communication and discovery)</li> <li>Port 5000: Atlas connection (outbound to Atlas server)</li> </ul>"},{"location":"cli/#error-handling","title":"Error Handling","text":""},{"location":"cli/#invalid-ip-address","title":"Invalid IP Address","text":"<pre><code>pod --rpc-ip invalid-ip\n# Error: Invalid IP address 'invalid-ip': invalid IP address syntax\n</code></pre>"},{"location":"cli/#ip-address-not-available","title":"IP Address Not Available","text":"<pre><code>pod --rpc-ip 192.168.1.200\n# Error: Cannot bind to IP address 192.168.1.200 on port 6000: Address not available.\n# Make sure the IP address is available on this system.\n</code></pre>"},{"location":"cli/#missing-argument-value","title":"Missing Argument Value","text":"<pre><code>pod --rpc-ip\n# error: a value is required for '--rpc-ip &lt;IP_ADDRESS&gt;' but none was supplied\n# \n# For more information, try '--help'.\n</code></pre>"},{"location":"cli/#unknown-argument","title":"Unknown Argument","text":"<pre><code>pod --invalid-option\n# error: unexpected argument '--invalid-option' found\n# \n# Usage: pod [OPTIONS]\n# \n# For more information, try '--help'.\n</code></pre>"},{"location":"cli/#configuration-examples","title":"Configuration Examples","text":""},{"location":"cli/#development-environment","title":"Development Environment","text":"<pre><code># Start isolated pnode for development\npod --no-entrypoint\n\n# Test pRPC locally\ncurl -X POST http://127.0.0.1:6000/rpc \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"jsonrpc\":\"2.0\",\"method\":\"get-version\",\"id\":1}'\n</code></pre>"},{"location":"cli/#production-public-node","title":"Production Public Node","text":"<pre><code># Start public node with proper logging\nRUST_LOG=info pod --rpc-ip 0.0.0.0\n\n# Verify pRPC is accessible\ncurl -X POST http://YOUR_PUBLIC_IP:6000/rpc \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"jsonrpc\":\"2.0\",\"method\":\"get-version\",\"id\":1}'\n</code></pre>"},{"location":"cli/#private-network-setup","title":"Private Network Setup","text":"<pre><code># Configure for private network\npod \\\n  --rpc-ip 10.0.1.100 \\\n  --entrypoint 10.0.1.50:9001 \\\n  --atlas-ip 10.0.1.10:5000\n</code></pre>"},{"location":"cli/#environment-variables","title":"Environment Variables","text":"<p>You can also configure logging and other runtime behavior:</p> <pre><code># Set log level\nexport RUST_LOG=debug\npod\n\n# Enable specific module logging\nexport RUST_LOG=pod::rpc=debug,pod::gossip=info\npod\n</code></pre>"},{"location":"cli/#systemd-service","title":"Systemd Service","text":"<p>For production deployments, the pnode can be managed as a systemd service. When installed via apt, the service file is automatically configured.</p> <pre><code>[Unit]\nDescription=Xandeum Pod System service\nAfter=network.target\n\n[Service]\nExecStart=/usr/bin/pod --rpc-ip 0.0.0.0\nRestart=always\nUser=pod\nEnvironment=NODE_ENV=production\nEnvironment=RUST_LOG=info\nStandardOutput=syslog\nStandardError=syslog\nSyslogIdentifier=xandeum-pod\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <pre><code># Enable and start the service\nsudo systemctl enable pod\nsudo systemctl start pod\n\n# Check status\nsudo systemctl status pod\n\n# View logs\nsudo journalctl -u pod -f\n</code></pre>"},{"location":"cli/#troubleshooting","title":"Troubleshooting","text":""},{"location":"cli/#port-already-in-use","title":"Port Already in Use","text":"<pre><code># Check what's using port 6000\nsudo lsof -i :6000\n\n# Kill process using the port\nsudo kill -9 &lt;PID&gt;\n</code></pre>"},{"location":"cli/#network-interface-issues","title":"Network Interface Issues","text":"<pre><code># List available network interfaces\nip addr show\n\n# Test if IP is accessible\nping &lt;your-ip&gt;\n</code></pre>"},{"location":"cli/#peer-discovery-problems","title":"Peer Discovery Problems","text":"<pre><code># Test connectivity to bootstrap node\nnc -u 173.212.207.32 9001\n\n# Check local gossip port\nsudo netstat -ulnp | grep 9001\n</code></pre> <p>Logging</p> <p>Use <code>RUST_LOG=debug</code> to get detailed logs for troubleshooting network and configuration issues. </p>"},{"location":"rpc-api/","title":"pRPC API Reference","text":"<p>Complete reference for all JSON-RPC 2.0 methods available in Xandeum pNode.</p>"},{"location":"rpc-api/#overview","title":"Overview","text":"<p>The Xandeum pNode pRPC API uses JSON-RPC 2.0 protocol over HTTP POST requests. All requests should be sent to the <code>/prpc</code> endpoint.</p> <p>Base URL</p> <p><code>http://&lt;pnode-ip&gt;:6000/rpc</code></p> <p>Default: <code>http://127.0.0.1:6000/rpc</code> (private)</p>"},{"location":"rpc-api/#network-architecture","title":"Network Architecture","text":"<p>The pnode uses several network ports for different services:</p> <ul> <li>Port 6000: pRPC API server (configurable IP binding)</li> <li>Port 80: Statistics dashboard (localhost only) </li> <li>Port 9001: Gossip protocol for peer discovery and communication</li> <li>Port 5000: Atlas server connection for data streaming (fixed endpoint)</li> </ul>"},{"location":"rpc-api/#available-methods","title":"Available Methods","text":"get-versionget-statsget-pods <p>Returns the current version of the pnode software.</p> <p>Returns comprehensive statistics about the pnode including system metrics, storage info, and network activity.</p> <p>Returns a list of all known peer pnodes in the network with their status information.</p>"},{"location":"rpc-api/#request","title":"Request","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get-version\",\n  \"id\": 1\n}\n</code></pre>"},{"location":"rpc-api/#response","title":"Response","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"version\": \"1.0.0\"\n  },\n  \"id\": 1\n}\n</code></pre>"},{"location":"rpc-api/#curl-example","title":"cURL Example","text":"<pre><code>curl -X POST http://127.0.0.1:6000/rpc \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"get-version\",\n    \"id\": 1\n  }'\n</code></pre>"},{"location":"rpc-api/#request_1","title":"Request","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get-stats\",\n  \"id\": 1\n}\n</code></pre>"},{"location":"rpc-api/#response_1","title":"Response","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"metadata\": {\n      \"total_bytes\": 1048576000,\n      \"total_pages\": 1000,\n      \"last_updated\": 1672531200\n    },\n    \"stats\": {\n      \"cpu_percent\": 15.5,\n      \"ram_used\": 536870912,\n      \"ram_total\": 8589934592,\n      \"uptime\": 86400,\n      \"packets_received\": 1250,\n      \"packets_sent\": 980,\n      \"active_streams\": 5\n    },\n    \"file_size\": 1048576000\n  },\n  \"id\": 1\n}\n</code></pre>"},{"location":"rpc-api/#response-fields","title":"Response Fields","text":"Field Type Description <code>metadata.total_bytes</code> number Total bytes processed <code>metadata.total_pages</code> number Total pages in storage <code>metadata.last_updated</code> number Unix timestamp of last update <code>stats.cpu_percent</code> number Current CPU usage percentage <code>stats.ram_used</code> number RAM used in bytes <code>stats.ram_total</code> number Total RAM available in bytes <code>stats.uptime</code> number Uptime in seconds <code>stats.packets_received</code> number Packets received per second <code>stats.packets_sent</code> number Packets sent per second <code>stats.active_streams</code> number Number of active network streams <code>file_size</code> number Storage file size in bytes"},{"location":"rpc-api/#request_2","title":"Request","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get-pods\",\n  \"id\": 1\n}\n</code></pre>"},{"location":"rpc-api/#response_2","title":"Response","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"pods\": [\n      {\n        \"address\": \"192.168.1.100:9001\",\n        \"version\": \"1.0.0\",\n        \"last_seen\": \"2023-12-01 14:30:00 UTC\",\n        \"last_seen_timestamp\": 1672574200\n      },\n      {\n        \"address\": \"10.0.0.5:9001\",\n        \"version\": \"1.0.1\",\n        \"last_seen\": \"2023-12-01 14:25:00 UTC\",\n        \"last_seen_timestamp\": 1672573900\n      }\n    ],\n    \"total_count\": 2\n  },\n  \"id\": 1\n}\n</code></pre>"},{"location":"rpc-api/#pod-fields","title":"Pod Fields","text":"Field Type Description <code>address</code> string IP address and port of the peer pnode <code>version</code> string Software version of the peer pnode <code>last_seen</code> string Human-readable timestamp of last contact <code>last_seen_timestamp</code> number Unix timestamp of last contact <code>total_count</code> number Total number of known pnodes"},{"location":"rpc-api/#error-handling","title":"Error Handling","text":"<p>All errors follow the JSON-RPC 2.0 specification and include standard error codes.</p>"},{"location":"rpc-api/#method-not-found","title":"Method Not Found","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"error\": {\n    \"code\": -32601,\n    \"message\": \"Method not found\"\n  },\n  \"id\": 1\n}\n</code></pre>"},{"location":"rpc-api/#internal-error","title":"Internal Error","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"error\": {\n    \"code\": -32603,\n    \"message\": \"Internal error\"\n  },\n  \"id\": 1\n}\n</code></pre>"},{"location":"rpc-api/#standard-error-codes","title":"Standard Error Codes","text":"Code Message Description -32601 Method not found The requested method does not exist -32603 Internal error Server encountered an internal error"},{"location":"rpc-api/#integration-examples","title":"Integration Examples","text":""},{"location":"rpc-api/#python-example","title":"Python Example","text":"<pre><code>import requests\nimport json\n\ndef call_prpc(method, params=None):\n    payload = {\n        \"jsonrpc\": \"2.0\",\n        \"method\": method,\n        \"id\": 1\n    }\n    if params:\n        payload[\"params\"] = params\n\n    response = requests.post(\n        \"http://127.0.0.1:6000/rpc\",\n        json=payload,\n        headers={\"Content-Type\": \"application/json\"}\n    )\n    return response.json()\n\n# Get version\nversion = call_prpc(\"get-version\")\nprint(f\"pNode version: {version['result']['version']}\")\n\n# Get stats\nstats = call_prpc(\"get-stats\")\nprint(f\"CPU usage: {stats['result']['stats']['cpu_percent']}%\")\n</code></pre>"},{"location":"rpc-api/#javascriptnodejs-example","title":"JavaScript/Node.js Example","text":"<pre><code>const fetch = require('node-fetch');\n\nasync function callPRPC(method, params = null) {\n  const payload = {\n    jsonrpc: \"2.0\",\n    method: method,\n    id: 1\n  };\n  if (params) payload.params = params;\n\n  const response = await fetch('http://127.0.0.1:6000/rpc', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(payload)\n  });\n\n  return await response.json();\n}\n\n// Usage\n(async () =&gt; {\n  const version = await callPRPC('get-version');\n  console.log(`pNode version: ${version.result.version}`);\n\n  const stats = await callPRPC('get-stats');\n  console.log(`Uptime: ${stats.result.stats.uptime} seconds`);\n})();\n</code></pre>"},{"location":"rpc-api/#bashcurl-example","title":"Bash/curl Example","text":"<pre><code>#!/bin/bash\n\nPRPC_URL=\"http://127.0.0.1:6000/rpc\"\n\n# Function to call pRPC\ncall_prpc() {\n  local method=$1\n  curl -s -X POST \"$PRPC_URL\" \\\n    -H \"Content-Type: application/json\" \\\n    -d \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"method\\\":\\\"$method\\\",\\\"id\\\":1}\"\n}\n\n# Get version\necho \"Getting version...\"\ncall_prpc \"get-version\" | jq '.result.version'\n\n# Get stats\necho \"Getting stats...\"\ncall_prpc \"get-stats\" | jq '.result.stats.cpu_percent'\n</code></pre> <p>Installation</p> <p>Install the pod via apt: <code>sudo apt install pod</code></p> <p>Rate Limiting</p> <p>There are currently no rate limits on the pRPC API, but be mindful of resource usage when making frequent requests.</p> <p>Security</p> <p>When using <code>--rpc-ip 0.0.0.0</code>, your pRPC API will be accessible from any network interface. Ensure proper firewall rules are in place. </p>"}]}